/* Copyright (c) 2025 GMO Cybersecurity by Ierae, Inc. All rights reserved. */

use hash::areion_hash_dm_256;

use super::*;

fn test_permute_256(input: &[u8; 32], output: &[u8; 32]) {
    let mut buf: [u8; 32] = [0; 32];
    unsafe { permute_areion_256u8_default(&mut buf, &input) }
    assert_eq!(buf, *output);
    unsafe { inv_permute_areion_256u8_default(&mut buf, &output) }
    assert_eq!(buf, *input);
}

fn test_permute_512(input: &[u8; 64], output: &[u8; 64]) {
    let mut buf: [u8; 64] = [0; 64];
    unsafe { permute_areion_512u8_default(&mut buf, &input) }
    assert_eq!(buf, *output);
    unsafe { inv_permute_areion_512u8_default(&mut buf, &output) }
    assert_eq!(buf, *input);
}

fn test_dm_256(input: &[u8; 32], output: &[u8; 32]) {
    let mut buf: [u8; 32] = [0; 32];
    unsafe { areion_hash_dm_256(&mut buf, &input) }
    assert_eq!(buf, *output);
}

fn test_dm_512(input: &[u8; 64], output: &[u8; 32]) {
    let mut buf: [u8; 32] = [0; 32];
    unsafe { areion_hash_dm_512(&mut buf, &input) }
    assert_eq!(buf, *output);
}

fn test_md(input: &[u8], output: &[u8; 32]) {
    let mut buf: [u8; 32] = [0; 32];
    unsafe { areion_hash_md(&mut buf, &input) }
    assert_eq!(buf, *output);
}

fn test_opp_256<const N: usize>(plaintext: &[u8; N], ciphertext: &[u8; N], ad: &[u8], key: &[u8; 16], nonce: &[u8; 16], tag: &[u8; 16]) {
    let mut buffer: [u8; N] = [0; N];
    let mut tag_buffer: [u8; 16] = [0; 16];
    encrypt_opp_256(&mut buffer, &mut tag_buffer, &ad, plaintext, &nonce, &key);
    assert_eq!(buffer, *ciphertext);
    assert_eq!(tag_buffer, *tag);

    let r = decrypt_opp_256(&mut buffer, &tag, &ad, ciphertext, &nonce, &key);
    assert!(r);
    assert_eq!(buffer, *plaintext)
}

fn test_opp_512<const N: usize>(plaintext: &[u8; N], ciphertext: &[u8; N], ad: &[u8], key: &[u8; 16], nonce: &[u8; 16], tag: &[u8; 16]) {
    let mut buffer: [u8; N] = [0; N];
    let mut tag_buffer: [u8; 16] = [0; 16];
    encrypt_opp_512(&mut buffer, &mut tag_buffer, &ad, plaintext, &nonce, &key);
    assert_eq!(buffer, *ciphertext);
    assert_eq!(tag_buffer, *tag);

    let r = decrypt_opp_512(&mut buffer, &tag, &ad, ciphertext, &nonce, &key);
    assert!(r);
    assert_eq!(buffer, *plaintext)
}

#[test]
fn primitive_works() {
    {
        let input: [u8; 32] = [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        let output: [u8; 32] = [
            0x28, 0x12, 0xa7, 0x24, 0x65, 0xb2, 0x6e, 0x9f,
            0xca, 0x75, 0x83, 0xf6, 0xe4, 0x12, 0x3a, 0xa1,
            0x49, 0x0e, 0x35, 0xe7, 0xd5, 0x20, 0x3e, 0x4b,
            0xa2, 0xe9, 0x27, 0xb0, 0x48, 0x2f, 0x4d, 0xb8,
        ];
        test_permute_256(&input, &output)    
    }
    {
        let input: [u8; 32] = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
            0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
        ];
        let output: [u8; 32] = [
            0x68, 0x84, 0x5f, 0x13, 0x2e, 0xe4, 0x61, 0x60,
            0x66, 0xc7, 0x02, 0xd9, 0x42, 0xa3, 0xb2, 0xc3,
            0xa3, 0x77, 0xf6, 0x5b, 0x13, 0xbb, 0x05, 0xc7,
            0xcd, 0x1f, 0xb2, 0x9c, 0x89, 0xaf, 0xa1, 0x85,
        ];
        test_permute_256(&input, &output)    
    }
    {
        let input: [u8; 64] = [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        let output: [u8; 64] = [
            0xb2, 0xad, 0xb0, 0x4f, 0xa9, 0x1f, 0x90, 0x15,
            0x59, 0x36, 0x71, 0x22, 0xcb, 0x3c, 0x96, 0xa9,
            0x78, 0xcf, 0x3e, 0xe4, 0xb7, 0x3c, 0x6a, 0x54,
            0x3f, 0xe6, 0xdc, 0x85, 0x77, 0x91, 0x02, 0xe7,
            0xe3, 0xf5, 0x50, 0x10, 0x16, 0xce, 0xed, 0x1d,
            0xd2, 0xc4, 0x8d, 0x0b, 0xc2, 0x12, 0xfb, 0x07,
            0xad, 0x16, 0x87, 0x94, 0xbd, 0x96, 0xcf, 0xf3,
            0x59, 0x09, 0xcd, 0xd8, 0xe2, 0x27, 0x49, 0x28,
        ];
        test_permute_512(&input, &output)    
    }
    {
        let input: [u8; 64] = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
            0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
            0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
            0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
            0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
        ];
        let output: [u8; 64] = [
            0xb6, 0x90, 0xb8, 0x82, 0x97, 0xec, 0x47, 0x0b,
            0x07, 0xdd, 0xa9, 0x2b, 0x91, 0x95, 0x9c, 0xff,
            0x13, 0x5e, 0x9a, 0xc5, 0xfc, 0x3d, 0xc9, 0xb6,
            0x47, 0xa4, 0x3f, 0x4d, 0xaa, 0x8d, 0xa7, 0xa4,
            0xe0, 0xaf, 0xbd, 0xd8, 0xe6, 0xe2, 0x55, 0xc2,
            0x45, 0x27, 0x73, 0x6b, 0x29, 0x8b, 0xd6, 0x1d,
            0xe4, 0x60, 0xba, 0xb9, 0xea, 0x79, 0x15, 0xc6,
            0xd6, 0xdd, 0xbe, 0x05, 0xfe, 0x8d, 0xde, 0x40,
        ];
        test_permute_512(&input, &output)    
    }
}

#[test]
fn hash_works() {
    {
        let input: [u8; 32] = [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        let output: [u8; 32] = [
            0x28, 0x12, 0xa7, 0x24, 0x65, 0xb2, 0x6e, 0x9f,
            0xca, 0x75, 0x83, 0xf6, 0xe4, 0x12, 0x3a, 0xa1,
            0x49, 0x0e, 0x35, 0xe7, 0xd5, 0x20, 0x3e, 0x4b,
            0xa2, 0xe9, 0x27, 0xb0, 0x48, 0x2f, 0x4d, 0xb8,
        ];
        test_dm_256(&input, &output)
    }
    {
        let input: [u8; 32] = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
            0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
        ];
        let output: [u8; 32] = [
            0x68, 0x85, 0x5d, 0x10, 0x2a, 0xe1, 0x67, 0x67,
            0x6e, 0xce, 0x08, 0xd2, 0x4e, 0xae, 0xbc, 0xcc,
            0xb3, 0x66, 0xe4, 0x48, 0x07, 0xae, 0x13, 0xd0,
            0xd5, 0x06, 0xa8, 0x87, 0x95, 0xb2, 0xbf, 0x9a,
        ];
        test_dm_256(&input, &output)
    }
    {
        let input: [u8; 64] = [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        let output: [u8; 32] = [
            0x59, 0x36, 0x71, 0x22, 0xcb, 0x3c, 0x96, 0xa9,
            0x3f, 0xe6, 0xdc, 0x85, 0x77, 0x91, 0x02, 0xe7,
            0xe3, 0xf5, 0x50, 0x10, 0x16, 0xce, 0xed, 0x1d,
            0xad, 0x16, 0x87, 0x94, 0xbd, 0x96, 0xcf, 0xf3,
        ];
        test_dm_512(&input, &output)
    }
    {
        let input: [u8; 64] = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
            0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
            0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
            0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
            0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
        ];
        let output: [u8; 32] = [
            0x0f, 0xd4, 0xa3, 0x20, 0x9d, 0x98, 0x92, 0xf0,
            0x5f, 0xbd, 0x25, 0x56, 0xb6, 0x90, 0xb9, 0xbb,
            0xc0, 0x8e, 0x9f, 0xfb, 0xc2, 0xc7, 0x73, 0xe5,
            0xd4, 0x51, 0x88, 0x8a, 0xde, 0x4c, 0x23, 0xf1,
        ];
        test_dm_512(&input, &output)
    }
    {
        let input: [u8; 128] = [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        let output: [u8; 32] = [
            0x7f, 0x22, 0x34, 0x44, 0x5f, 0x3a, 0x72, 0x00,
            0x65, 0x93, 0x79, 0x42, 0x01, 0x53, 0x6c, 0x94,
            0x09, 0x5d, 0xab, 0xd3, 0xfd, 0xb5, 0x84, 0x67,
            0x48, 0xd3, 0x59, 0x55, 0x5c, 0x52, 0xe6, 0x51,
        ];
        test_md(&input, &output)
    }
    {
        let input: [u8; 128] = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
            0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
            0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
            0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
            0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
            0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
            0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
            0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
            0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
            0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
            0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
            0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
            0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
        ];
        let output: [u8; 32] = [
            0x3e, 0x4d, 0x31, 0x0f, 0xbe, 0x21, 0xd0, 0x7b,
            0xb9, 0x00, 0x46, 0x88, 0xa1, 0x50, 0x36, 0xb7,
            0xab, 0xd9, 0xae, 0x2f, 0xe9, 0xe6, 0x0c, 0x9a,
            0xca, 0x2a, 0xcc, 0x36, 0x98, 0x5e, 0x60, 0x0b,
        ];
        test_md(&input, &output)
    }
}

#[test]
fn opp_works() {
    {
        let key: [u8; 16] = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        ];
        let nonce: [u8; 16] = [
            0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90, 0x80,
            0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00,
        ];
        let ad: [u8; 16] = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        ];
        let plaintext: [u8; 32] = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
            0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
        ];
        let ciphertext: [u8; 32] = [
            0xCF, 0x48, 0xBE, 0x2E, 0x80, 0xF8, 0x1E, 0x74,
            0xCC, 0xE2, 0x07, 0xE8, 0x22, 0x0C, 0xD4, 0x9E,
            0xD9, 0x54, 0x45, 0xF7, 0x63, 0x0F, 0xC8, 0x1C,
            0xFE, 0xC2, 0xE4, 0x56, 0x10, 0x16, 0x0C, 0x00,
        ];
        let tag: [u8; 16] = [
            0xE8, 0x4A, 0xB7, 0x94, 0x4E, 0xE1, 0x9F, 0xC5,
            0x60, 0x6F, 0xD3, 0x92, 0x88, 0x28, 0xB4, 0x07,
        ];
        test_opp_256(&plaintext, &ciphertext, &ad, &key, &nonce, &tag)
    }
    {
        let key: [u8; 16] = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        ];
        let nonce: [u8; 16] = [
            0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90, 0x80,
            0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00,
        ];
        let ad: [u8; 48] = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
            0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
            0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
            0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
        ];
        let plaintext: [u8; 48] = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
            0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
            0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
            0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
        ];
        let ciphertext: [u8; 48] = [
            0xCF, 0x48, 0xBE, 0x2E, 0x80, 0xF8, 0x1E, 0x74,
            0xCC, 0xE2, 0x07, 0xE8, 0x22, 0x0C, 0xD4, 0x9E,
            0xD9, 0x54, 0x45, 0xF7, 0x63, 0x0F, 0xC8, 0x1C,
            0xFE, 0xC2, 0xE4, 0x56, 0x10, 0x16, 0x0C, 0x00,
            0x41, 0x07, 0xB1, 0x45, 0x00, 0xBB, 0x1E, 0x09,
            0x4C, 0x60, 0xAF, 0x64, 0x2F, 0xE0, 0x37, 0xA0,
        ];
        let tag: [u8; 16] = [
            0x06, 0xFD, 0xC3, 0xF3, 0xB7, 0x47, 0x4D, 0x55,
            0xA1, 0xF7, 0x2D, 0xE5, 0xF7, 0x1C, 0x20, 0xC2,
        ];
        test_opp_256(&plaintext, &ciphertext, &ad, &key, &nonce, &tag)
    }
    {
        let key: [u8; 16] = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        ];
        let nonce: [u8; 16] = [
            0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90, 0x80,
            0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00,
        ];
        let ad: [u8; 16] = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        ];
        let plaintext: [u8; 64] = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
            0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
            0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
            0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
            0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
        ];
        let ciphertext: [u8; 64] = [
            0x26, 0x2A, 0x94, 0x61, 0xB8, 0x2D, 0x30, 0x8D,
            0x9B, 0x5E, 0x17, 0xE0, 0x7B, 0x6E, 0x2E, 0xC6,
            0x11, 0xA1, 0x2C, 0xB7, 0x3C, 0x1F, 0x07, 0xD1,
            0xC1, 0xFB, 0x64, 0x58, 0x48, 0x05, 0xED, 0x37,
            0xCB, 0x3B, 0xC0, 0x06, 0x5A, 0x3C, 0x03, 0x86,
            0x6D, 0x16, 0xD2, 0x10, 0xDF, 0xDA, 0x71, 0xF1,
            0xDE, 0xE0, 0xAC, 0x0B, 0xAF, 0x9D, 0x2C, 0x85,
            0x3C, 0xBD, 0xC7, 0xCC, 0x44, 0x3F, 0xD4, 0x87,
        ];
        let tag: [u8; 16] = [
            0x2B, 0x85, 0xBE, 0xCC, 0xCB, 0x0F, 0xB1, 0x25,
            0x96, 0x31, 0x48, 0x38, 0x6E, 0x0A, 0x5C, 0xE9,
        ];
        test_opp_512(&plaintext, &ciphertext, &ad, &key, &nonce, &tag)
    }
}
